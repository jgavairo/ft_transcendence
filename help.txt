Dockerfile :
	C'est le fichier qui définit comment construire l'image Docker
	Il utilise Node.js 18 avec Alpine Linux (version légère)
	Il installe les dépendances nécessaires (python3, make, g++)
	Il copie les fichiers du projet et installe les dépendances npm
	Il configure le script de démarrage (start.sh)
docker-compose.yml :
	Définit les services et leur configuration
	Expose les ports :
	8080 pour le frontend
	3000 pour le backend
	Configure les volumes pour :
	Le code source du frontend et backend
	Les node_modules (isolés dans le conteneur)
	Les données persistantes (base de données SQLite)
	Définit les variables d'environnement :
	NODE_ENV=development
	DATABASE_URL pour la connexion à la base de données
	Crée le dossier de données et lance le script de démarrage
start.sh :
	Script shell qui démarre les services
	Lance le backend en arrière-plan avec npm run dev
	Lance le frontend avec npm run dev
	Utilise les chemins absolus dans le conteneur
Frontend (dossier) :
	package.json : Définit les dépendances et scripts du frontend
	src/ : Contient le code source TypeScript/React
	index.html : Point d'entrée de l'application
	vite.config.ts : Configuration de Vite (serveur de développement)
Backend (dossier) :
	package.json : Définit les dépendances et scripts du backend
	src/ : Contient le code source Node.js/Fastify
	prisma/ : Configuration et schéma de la base de données
index.js : Point d'entrée du serveur
.dockerignore :
Liste les fichiers à ignorer lors de la construction de l'image Docker
Exclut les node_modules, les fichiers de build, etc.
.env :
Contient les variables d'environnement sensibles
Ne doit pas être versionné (ajouté dans .gitignore)
Stocke les clés secrètes, URLs de base de données, etc.
.gitignore :
Liste les fichiers à ignorer par Git
Exclut les node_modules, les fichiers de build, les fichiers sensibles
La structure est organisée pour :
Séparer clairement le frontend et le backend
Faciliter le développement avec le hot-reload
Persister les données avec SQLite
Sécuriser les informations sensibles
Optimiser la construction Docker